# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
         import matplotlib.pyplot as plt
from mpl_finance import candlestick_ohlc

# Example data
# Each element in the data list represents a single candlestick with [timestamp, open, high, low, close] values
data = [
    [1, 10, 15, 8, 12],
    [2, 12, 14, 10, 11],
    [3, 11, 13, 9, 12],
    [4, 12, 15, 10, 14],
    [5, 14, 16, 13, 15],
]

# Convert the timestamp to a matplotlib-friendly format (usually required for candlestick plots)
ohlc = [[candle[0], candle[1], candle[2], candle[3], candle[4]] for candle in data]

# Create a new figure and axis for the plot
fig, ax = plt.subplots()

# Plot the candlestick chart
candlestick_ohlc(ax, ohlc, width=0.6, colorup='green', colordown='red')

# Set the x-axis labels as the timestamp values
ax.set_xticks([candle[0] for candle in data])
ax.set_xticklabels([candle[0] for candle in data])

# Set the y-axis limits based on the highest high and lowest low in the data
highs = [candle[2] for candle in data]
lows = [candle[3] for candle in data]
ax.set_ylim(min(lows) - 1, max(highs) + 1)

# Set the chart title and axis labels
plt.title("Institutional Footprint Candles")
plt.xlabel("Timestamp")
plt.ylabel("Price")

# Show the chart
plt.show()

 
